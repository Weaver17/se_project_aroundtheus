!function(){"use strict";const e=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],t={name:document.querySelector(".profile__name"),description:document.querySelector(".profile__description"),avatar:document.querySelector(".profile__avatar-image"),_id:"203ef5b29b8491c8911cf220"},s={inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},r=document.querySelector("#profile-edit-modal"),n=document.querySelector("#add-card-modal"),i=document.querySelector("#profile-picture-modal"),a=r.querySelector(".modal__form"),o=n.querySelector(".modal__form"),l=i.querySelector(".modal__form"),c=document.querySelector("#profile-edit-button"),d=document.querySelector("#add-card-button"),h=(n.querySelector("#card-form"),document.querySelector("#modal-name")),m=document.querySelector("#modal-description"),u=(document.querySelector("#modal-title"),document.querySelector("#modal-link"),document.querySelector("#modal-image"),document.querySelector("#modal-image-title"),document.querySelector("#profile-avatar-button")),_=document.querySelector("#modal-picture"),p=document.querySelector(".profile__avatar-image");document.querySelector(".card__like-button"),document.querySelector(".card__delete-button"),document.querySelector("#confirm-modal-form");class v{constructor(e,t,s,r,n){let{name:i,link:a,isLiked:o,_id:l}=e;this._name=i,this._link=a,this._isLiked=o,this.id=l,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteBtn=r,this._handleLikeBtn=n,this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardLikeButton.addEventListener("click",this._handleLikeBtn(this)),this._cardDeleteBtn.addEventListener("click",this._handleDeleteBtn(this)),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this)}))}removeCard(){this._cardElement.remove()}getCardId(){return this.id}getLikedStatus(){return this._isLiked}handleIsLiked(e){this._isLiked=e,this._renderisLiked()}_renderisLiked(){this._isLiked?this._cardLikeButton.classList.add("card__like-button_active"):this._cardLikeButton.classList.remove("card__like-button_active")}getView(){return this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardLikeButton=this._cardElement.querySelector(".card__like-button"),this._cardDeleteBtn=this._cardElement.querySelector(".card__delete-button"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._setEventListeners(),this._renderisLiked(),this._cardElement}}class f{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}disableBtn(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0}_enableBtn(){this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableBtn(this._submitBtn,this._inactiveButtonClass):this._enableBtn(this._submitBtn,this._inactiveButtonClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputEls=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitBtn=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this.disableBtn()})),this._setEventListeners()}}class E{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class S{constructor(e){this._popupElement=document.querySelector(e),this._closeBtn=this._popupElement.querySelector(".modal__exit"),this._modalBackground=this._popupElement.querySelector(".modal__background")}open(){document.addEventListener("keydown",this._handleEscapeClose),this._popupElement.classList.add("modal_opened")}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscapeClose)}_handleEscapeClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._closeBtn.addEventListener("click",(()=>{this.close()})),this._modalBackground.addEventListener("click",(()=>{this.close()}))}}class g extends S{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__save")}_getInputValues(){const e=Array.from(this._form.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}viewLoading(e){this._submitBtn.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const y=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s,this._authorization=s.authorization,this._contentType=s.contentType}_handleServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getAppInfo(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleServerResponse).catch((e=>console.error(e)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleServerResponse).catch((e=>console.error(e)))}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleServerResponse).catch((e=>console.error(e)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes/`,{method:"PUT",headers:this._headers,body:JSON.stringify({isLiked:!0})}).then(this._handleServerResponse).catch((e=>console.error(e)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes/`,{method:"DELETE",headers:this._headers,body:JSON.stringify({isLiked:!1})}).then(this._handleServerResponse).catch((e=>console.error(e)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleServerResponse).catch((e=>console.error(e)))}setUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,description:t})}).then(this._handleServerResponse).catch((e=>console.error(e)))}changeAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse).catch((e=>console.error(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"40adfe4e-c0e4-40a1-9506-b555db893f72","Content-Type":"application/json"}});y.getInitialCards().then((()=>{const t=new E({items:e,renderer:e=>{const s=L(e);t.addItem(s)}},".gallery__cards");t.renderItems()})).catch((e=>console.error(e))),y.getUserInfo().then((e=>{console.log(e),k.setUserInfo(e.name,e.about),k.setAvatar(e.avatar)})).catch((e=>console.error(e)));const L=e=>new v({name:e.name,link:e.link,isLiked:e.isLiked,_id:e._id},"#card-template",$,T,x).getView(),k=new class{constructor(e){let{name:t,description:s,avatar:r}=e;this._name=t,this._job=s,this._avatar=r}getUserInfo(){return{name:this._name.textContent,description:this._job.textContent}}setUserInfo(e,t){this._name.textContent=e,this._job.textContent=t}setAvatar(e){this._avatar.src=e}}(t),b=new g("#profile-picture-modal",(function(e){y.changeAvatar(e).then((e=>{k.setAvatar(e.src)}))})),C=new g("#profile-edit-modal",(function(e){C.viewLoading(!0),y.setUserInfo(e.name,e.about).then((e=>{k.setUserInfo(e.name,e.about),I.disableBtn(),C.close()})).catch((e=>{console.error(e)})).finally((()=>{k.viewLoading(!1)}))})),w=new g("#add-card-modal",(function(e){w.viewLoading(!0),y.addCard(e).then((e=>{cardSection.addItem(L({name:e.name,link:e.link})),U.disableBtn(),w.reset(),w.close()})).catch((e=>{console.error(e)})).finally((()=>{w.viewLoading(!1)}))})),B=new class extends S{constructor(e){super(e),this._form=this._popupElement.querySelector(".modal__form"),this._confirmBtn=this._popupElement.querySelector(".modal__confirm")}handleConfirm(e){this._handleDeleteConfirm=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteConfirm}))}}("#confirm-modal"),q=new class extends S{constructor(e){super(e),this._previewImage=this._popupElement.querySelector("#modal-image"),this._previewImageTitle=this._popupElement.querySelector("#modal-image-title")}open(e){let{name:t,link:s}=e;this._previewImage.alt=t,this._previewImageTitle.textContent=t,this._previewImage.src=s,super.open()}}("#image-modal"),I=new f(s,a),U=new f(s,o),j=new f(s,l);function $(e){q.open({name:e._name,link:e._link})}function x(e){const t=e.getCardId();e.getLikedStatus(),console.log(t)}function T(e){B.open(),B.handleConfirm((()=>{y.removeCard(e._id)}))}q.setEventListeners(),C.setEventListeners(),w.setEventListeners(),b.setEventListeners(),B.setEventListeners(),I.enableValidation(),U.enableValidation(),j.enableValidation(),u.addEventListener("click",(()=>{_.value=p.src,b.open()})),c.addEventListener("click",(()=>{const{name:e,description:t}=k.getUserInfo();h.value=e,m.value=t,C.open()})),d.addEventListener("click",(()=>{w.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,